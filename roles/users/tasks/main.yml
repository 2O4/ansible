- name: Configure login.defs
  ansible.builtin.template:
    src: login.defs.j2
    dest: /etc/login.defs
    owner: root
    group: root
    mode: 0644
    backup: true

- name: Configure useradd default
  ansible.builtin.template:
    src: useradd.j2
    dest: /etc/default/useradd
    owner: root
    group: root
    mode: 0644
    backup: true

- name: Configure shell timeout
  ansible.builtin.template:
    src: autologout.sh.j2
    dest: /etc/profile.d/autologout.sh
    owner: root
    group: root
    mode: 0644

- name: Add users
  ansible.builtin.user:
    name: "{{ item.name }}"
    comment: "{{ item.comment | default('') }}"
    password: "{{ lookup('password', 'credentials/' + item.name + '/' + ansible_host + '.txt encrypt=md5_crypt') }}"
    uid: "{{ item.uid }}"
    shell: /bin/bash
    password_expire_max: 30
    update_password: on_create
    expires: "{{ item.expires | default(-1) }}"
    force: "{{ item.force | default(false) }}"
    generate_ssh_key: "{{ item.generate_ssh_key | default(false) }}"
    ssh_key_type: "{{ item.ssh_key_type | default(default_ssh_key_type) }}"
    ssh_key_comment: "{{ item.ssh_key_comment | default(item.name) }}"
  with_items: "{{ users }}"
  register: updated_users
  notify: "updated users"
  ignore_errors: true
  when: users

- name: Set SSH authorized_keys
  ansible.posix.authorized_key:
    user: "{{ item.name }}"
    state: present
    key: "{{ item.authorized_keys }}"
    exclusive: true
  with_items: "{{ users | selectattr('authorized_keys', 'defined') }}"
  when: users

- name: Remove users
  ansible.builtin.user:
    name: "{{ item }}"
    remove: true
    state: absent
  loop: "{{ remove_users }}"
  when: remove_users
